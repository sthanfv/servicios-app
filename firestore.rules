
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user is owner of a document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Rules for 'users' collection
    match /users/{userId} {
      // Anyone can see public profile info
      allow get: if true;
      // Only the authenticated owner can create or update their own profile
      allow create, update: if isAuthenticated() && isOwner(userId);
      // Deletion of users is typically handled by server-side admin logic
      allow delete: if false; 
    }

    // Rules for 'services' collection
    match /services/{serviceId} {
      // Anyone can view a service
      allow get: if true;
      // Only authenticated users can create a service
      allow create: if isAuthenticated();
      // Only the owner of the service can update or delete it
      allow update, delete: if isAuthenticated() && isOwner(resource.data.userId);

      // Rules for 'reviews' subcollection
      match /reviews/{reviewId} {
        // Any authenticated user can read reviews
        allow read: if isAuthenticated();
        // Only authenticated users who are NOT the service owner can create a review
        // And a user can only create one review per service.
        allow create: if isAuthenticated() 
                      && request.auth.uid != get(/databases/$(database)/documents/services/$(serviceId)).data.userId
                      && !exists(/databases/$(database)/documents/services/$(serviceId)/reviews/$(request.auth.uid));
        // Reviews are immutable
        allow update, delete: if false;
      }
    }

    // Rules for 'chats' collection and 'messages' subcollection
    match /chats/{chatId} {
      // Users can only access chats they are participants in
      allow get, list: if isAuthenticated() && request.auth.uid in resource.data.participants;
      allow create: if isAuthenticated() && request.auth.uid in request.resource.data.participants;
      allow update: if isAuthenticated() && request.auth.uid in resource.data.participants;

      // Rules for 'messages' subcollection
      match /messages/{messageId} {
         // Only participants can read messages
        allow get, list: if isAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
        // Only participants can send messages
        allow create: if isAuthenticated() 
                      && isOwner(request.resource.data.senderId)
                      && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
        // Messages are immutable
        allow update, delete: if false;
      }
    }
  }
}
