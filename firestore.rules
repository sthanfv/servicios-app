rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Users: Publicly readable, but only the user can write to their own document.
    match /users/{userId} {
      allow read: if true;
      allow create, update, delete: if request.auth != null && request.auth.uid == userId;
    }

    // Services: Publicly readable, only owner can write.
    match /services/{serviceId} {
      allow get, list: if true;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && resource.data.userId == request.auth.uid;
      
      // Reviews subcollection: Publicly readable, only authenticated users can write.
      match /reviews/{reviewId} {
        allow get, list: if true;
        allow create: if request.auth != null;
        // Future: allow update/delete only for the review owner.
      }
    }
    
    // Chats: Only participants can read/write.
    match /chats/{chatId} {
      allow read, update, delete: if request.auth != null && request.auth.uid in resource.data.participants;
      allow create: if request.auth != null && request.auth.uid in request.resource.data.participants;
      
      // Messages subcollection: Inherits chat participants rule.
       match /messages/{messageId} {
        allow read, create: if request.auth != null && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
      }
    }
  }
}
